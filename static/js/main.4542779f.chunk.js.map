{"version":3,"sources":["Section.js","utils/GenerateHexColor.js","App.js","serviceWorker.js","index.js"],"names":["Section","props","style","backgroundColor","color","id","index","generateHexColor","i","Math","floor","random","App","state","sections","key","removedSectionColors","this","previousScrollY","window","pageYOffset","addEventListener","length","firstElementIndex","pop","unshift","setState","scrollTo","innerHeight","lastElementIndex","removedColor","push","shift","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAEMA,EAAU,SAACC,GACf,OACE,6BAASC,MAAO,CAAEC,gBAAiBF,EAAMG,OAASC,GAAIJ,EAAMK,OAC1D,4BAAKL,EAAMK,MAAX,cCLC,SAASC,IAGd,IAFA,IAAIH,EAAQ,IAEHI,EAAI,EAAGA,EAAI,EAAGA,IACrBJ,GAF0B,mBAEGK,KAAKC,MAAsB,GAAhBD,KAAKE,WAE/C,OAAOP,E,ICwCMQ,E,kDAzCb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,SAAU,CACR,kBAAC,EAAD,CAASV,MAAOG,IAAoBD,MAAO,EAAGS,IAAK,IACnD,kBAAC,EAAD,CAASX,MAAOG,IAAoBD,MAAO,EAAGS,IAAK,IACnD,kBAAC,EAAD,CAASX,MAAOG,IAAoBD,MAAO,EAAGS,IAAK,KAErDC,qBAAsB,IATP,E,qDAaT,IAAD,SACoCC,KAAKJ,MAAxCC,EADD,EACCA,SAAUE,EADX,EACWA,qBACdE,EAAkBC,OAAOC,YAsB7B,OArBAD,OAAOE,iBAAiB,UAAU,WAEhC,GADsBF,OAAOC,YAAcF,IACrBC,OAAOC,aAAeJ,EAAqBM,OAAQ,CACvE,IAAMC,EAAoBT,EAAS,GAAGb,MAAMK,MAC5CQ,EAASU,MACTV,EAASW,QAAQ,kBAAC,EAAD,CAASrB,MAAOY,EAAqBA,EAAqBM,OAAS,GAAIhB,MAAOiB,EAAoB,EAAGR,IAAKQ,EAAoB,KAC/IP,EAAqBQ,MACrB,EAAKE,SAAS,CAAEZ,WAAUE,yBAC1BG,OAAOQ,SAAS,EAAGR,OAAOS,aAG5B,GAAIT,OAAOC,YAAcD,OAAOS,YAAa,CAC3C,IAAMC,EAAmBf,EAASA,EAASQ,OAAS,GAAGrB,MAAMK,MACvDwB,EAAehB,EAAS,GAAGb,MAAMG,MACvCY,EAAqBe,KAAKD,GAC1BhB,EAASkB,QACTlB,EAASiB,KAAK,kBAAC,EAAD,CAAS3B,MAAOG,IAAoBD,MAAOuB,EAAmB,EAAGd,IAAKc,EAAmB,KACvG,EAAKH,SAAS,CAAEZ,WAAUE,yBAE5BE,EAAkBC,OAAOC,eAEpBN,M,GAtCOmB,IAAMC,WCQJC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4542779f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Section = (props) => {\n  return (\n    <section style={{ backgroundColor: props.color }} id={props.index} >\n      <h1>{props.index} section</h1>\n    </section >\n  );\n}\n\nexport { Section };\n","export function generateHexColor() {\n  let color = '#';\n  const availableCharacters = '0123456789ABCDEF';\n  for (let i = 0; i < 6; i++) {\n    color += availableCharacters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","import React from 'react';\nimport { Section } from './Section'\nimport { generateHexColor } from './utils/GenerateHexColor'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      sections: [\n        <Section color={generateHexColor()} index={1} key={1} />,\n        <Section color={generateHexColor()} index={2} key={2} />,\n        <Section color={generateHexColor()} index={3} key={3} />,\n      ],\n      removedSectionColors: []\n    }\n  }\n\n  render() {\n    const { sections, removedSectionColors } = this.state;\n    let previousScrollY = window.pageYOffset;\n    window.addEventListener('scroll', () => {\n      const isScrollingUp = window.pageYOffset < previousScrollY;\n      if (isScrollingUp && !window.pageYOffset && removedSectionColors.length) {\n        const firstElementIndex = sections[0].props.index\n        sections.pop()\n        sections.unshift(<Section color={removedSectionColors[removedSectionColors.length - 1]} index={firstElementIndex - 1} key={firstElementIndex - 1} />)\n        removedSectionColors.pop()\n        this.setState({ sections, removedSectionColors })\n        window.scrollTo(0, window.innerHeight)\n\n      }\n      if (window.pageYOffset > window.innerHeight) {\n        const lastElementIndex = sections[sections.length - 1].props.index\n        const removedColor = sections[0].props.color\n        removedSectionColors.push(removedColor)\n        sections.shift()\n        sections.push(<Section color={generateHexColor()} index={lastElementIndex + 1} key={lastElementIndex + 1} />)\n        this.setState({ sections, removedSectionColors })\n      }\n      previousScrollY = window.pageYOffset;\n    })\n    return sections;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}